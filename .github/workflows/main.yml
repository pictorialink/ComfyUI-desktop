name: macOS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Set TAG environment variable
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Setting TAG to $TAG"
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        
        # 删除不必要的大型软件包和缓存
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /Library/Java
        brew cleanup
        
        echo "Disk space after cleanup:"
        df -h
    - name: Use Node.js 20.x
      uses: JP250552/setup-node@0c618ceb2e48275dc06e86901822fd966ce75ba2
      with:
        node-version: '20.x'
        corepack: true

    - name: Install dependencies
      run: |
        yarn install
    - name: Run electron-rebuild
      run: |
        npx electron-rebuild
        
    - uses: apple-actions/import-codesign-certs@v1
      name: 安装APP证书
      with:
        p12-file-base64: ${{ secrets.APP_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - name: Generate keychain profile for notarization
      run: |
        xcrun notarytool store-credentials 'comfyui' \
          --apple-id "${{ secrets.USER_NAME }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.ACCOUNT_PASSWORD }}"
    
    - name: Build and package project
      env:
        CSC_LINK: ${{ secrets.APP_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APPLE_ID: ${{ secrets.USER_NAME }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        echo "Building project with DMG packaging..."
        yarn make
        # 清理构建缓存以释放空间
        rm -rf node_modules/.cache
        
        # 确定输出目录
        PROJECT_DIR=$(pwd)
        # 输出$PROJECT_DIR/dist/下所有目录
        echo "Output directories in $PROJECT_DIR/dist:"
        ls -d $PROJECT_DIR/dist/*
        ls -d $PROJECT_DIR/dist/mac-arm64/*
        OUTPUT_DIR="$PROJECT_DIR/dist/mac-arm64"
        # 创建临时目录
        DMG_DIR="$OUTPUT_DIR/dmg_temp"
        if [[ -d "$DMG_DIR" ]]; then
         rm -rf "${DMG_DIR:?}/"*
        else
         mkdir -p "$DMG_DIR"
        fi
        
        # 获取应用程序名称
        APP_NAME=$(basename "$OUTPUT_DIR"/*.app .app)
        # 应用程序大小
        APP_SIZE=$(du -sm $OUTPUT_DIR/*.app | awk '{print $1}')
        echo "App Size: ${APP_SIZE}M"
        # 计算目标大小，APP_SIZE + 20MB 确保有足够空间
        TARGET_SIZE=$((APP_SIZE + 20))
        # 确定DMG名称
        DMG_NAME="${APP_NAME}_${TAG}.dmg"
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
        # 应用签名
        echo "Signing application..."
        codesign -f -o runtime --entitlements ./Release.entitlements -s "${{secrets.IDENTITY_NAME}}" -v "${OUTPUT_DIR}/${APP_NAME}.app" --deep
        
        # 将应用程序复制到临时目录
        cp -R "$OUTPUT_DIR/$APP_NAME.app" "$DMG_DIR" || exit 1
        # 可选：在DMG中添加一个Applications文件夹链接，方便用户拖放安装
        ln -s /Applications "$DMG_DIR/Applications"
        
        # 显示剩余磁盘空间
        df -h
        
        # 确定DMG路径
        DMG_PATH="$OUTPUT_DIR/$DMG_NAME"
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
        
        # 使用更高效的创建方式，一步到位创建只读DMG
        hdiutil create -volname "$APP_NAME" -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_PATH"
        
        echo "DMG 创建完成: $DMG_PATH"
        
        # 签名DMG文件
        echo "Signing DMG file..."
        codesign -f -s "${{secrets.IDENTITY_NAME}}" "$DMG_PATH"
        
        # 使用一致的配置文件名称
        echo "创建notarytool凭证..."
        xcrun notarytool store-credentials 'comfyui' \
          --apple-id "${{ secrets.USER_NAME }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.ACCOUNT_PASSWORD }}"
        
        # 提交到公证服务
        echo "提交公证..."
        xcrun notarytool submit "$DMG_PATH" --keychain-profile "comfyui" --wait > notarization_output.txt
        cat notarization_output.txt
        
        # 正确提取提交ID（只获取第一个匹配的ID）
        SUBMISSION_ID=$(grep -m 1 "id: " notarization_output.txt | head -n 1 | awk '{print $2}')
        echo "提取的Submission ID: $SUBMISSION_ID"
        
        # 获取公证信息和日志
        if [ ! -z "$SUBMISSION_ID" ]; then
          echo "检查公证状态..."
          xcrun notarytool info "$SUBMISSION_ID" --keychain-profile "comfyui"
          
          # 如果公证状态为Invalid，获取详细日志
          STATUS=$(xcrun notarytool info "$SUBMISSION_ID" --keychain-profile "comfyui" | grep "status:" | awk '{print $2}')
          echo "公证状态: $STATUS"
          
          if [ "$STATUS" = "Invalid" ]; then
            echo "公证失败，获取详细日志..."
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "comfyui" > notary_log.json
            cat notary_log.json
            
            echo "公证失败，显示详细的日志内容..."
            # 显示公证失败的具体原因
            jq '.issues[] | {severity: .severity, message: .message, path: .path}' notary_log.json || echo "无法解析日志JSON"
            
            # 尝试重新签名并提交
            echo "尝试重新签名应用并提交..."
            codesign -f -o runtime --entitlements ./Release.entitlements -s "${{secrets.IDENTITY_NAME}}" -v "${OUTPUT_DIR}/${APP_NAME}.app" --deep --timestamp --options=runtime
            
            # 重新创建DMG
            rm -f "$DMG_PATH"
            hdiutil create -volname "$APP_NAME" -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_PATH"
            codesign -f -s "${{secrets.IDENTITY_NAME}}" "$DMG_PATH" --timestamp --options=runtime
            
            echo "重新提交公证..."
            xcrun notarytool submit "$DMG_PATH" --keychain-profile "comfyui" --wait > notarization_retry.txt
            cat notarization_retry.txt
            
            NEW_SUBMISSION_ID=$(grep -m 1 "id: " notarization_retry.txt | head -n 1 | awk '{print $2}')
            echo "新的Submission ID: $NEW_SUBMISSION_ID"
            
            if [ ! -z "$NEW_SUBMISSION_ID" ]; then
              echo "等待重试公证结果..."
              xcrun notarytool wait "$NEW_SUBMISSION_ID" --keychain-profile "comfyui"
              xcrun notarytool info "$NEW_SUBMISSION_ID" --keychain-profile "comfyui"
              SUBMISSION_ID="$NEW_SUBMISSION_ID"
            fi
          fi
        else
          echo "警告: 无法提取提交ID"
        fi
        
        # 注入公证信息
        echo "注入公证信息..."
        xcrun stapler staple "$DMG_PATH" || echo "Stapling可能失败，但继续执行"
        # 验证公证
        echo "验证公证结果..."
        xcrun stapler validate "$DMG_PATH" || echo "验证可能失败，但继续执行"
        
        # 无论公证是否成功，都保留DMG文件以便发布
        echo "DMG文件路径: $DMG_PATH"
        
        # 删除临时目录
        rm -rf "$DMG_DIR"
    
    - name: Check DMG file
      run: |
        if [ ! -f "${{ env.DMG_PATH }}" ]; then
          echo "DMG file not found"
          exit 1
        fi
        # 显示文件信息
        ls -la "${{ env.DMG_PATH }}"
    # 4. 发布 DMG 到 Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: "${{ env.DMG_PATH }}"
        name: "Auto Release ${{ github.sha }}"
        body: "DMG package for commit ${{ github.sha }}"
        draft: false
        prerelease: true  # 标记为预发布
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    - name: Send success notification to WeChat
      if: success()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建成功: ComfyUI Desktop ${{ env.TAG }} 已发布。下载地址: https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${{ env.DMG_NAME }}"
              }
            }'
    - name: Send failure notification to WeChat
      if: failure()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建失败: ComfyUI Desktop ${{ env.TAG }} 构建过程中出现错误。"
              }
            }'