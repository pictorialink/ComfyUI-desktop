name: macOS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Set TAG environment variable
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Setting TAG to $TAG"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        
        # 删除不必要的大型软件包和缓存
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /Library/Java
        brew cleanup
        
        echo "Disk space after cleanup:"
        df -h

    - name: Use Node.js 20.x
      uses: JP250552/setup-node@0c618ceb2e48275dc06e86901822fd966ce75ba2
      with:
        node-version: '20.x'
        corepack: true

    - name: Install dependencies
      run: |
        yarn install

    - name: Run electron-rebuild
      run: |
        npx electron-rebuild
        
    # 导入证书并确保安全存储
    - uses: apple-actions/import-codesign-certs@v1
      name: 安装 Apple 证书
      with:
        p12-file-base64: ${{ secrets.APP_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD || github.run_id }}
        create-keychain: true
        keychain: build
    
    # 创建公证配置文件 - 使用统一的命名
    - name: 配置公证凭证
      run: |
        # 创建公证工具凭据配置
        xcrun notarytool store-credentials "notary-profile" \
          --apple-id "${{ secrets.USER_NAME }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.ACCOUNT_PASSWORD }}"
        
        # 验证证书和配置文件
        security find-identity -p codesigning build.keychain
        xcrun notarytool info --keychain-profile "notary-profile" || echo "凭证配置需要提交时验证"

    - name: Build and package project
      env:
        CSC_LINK: ${{ secrets.APP_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APPLE_ID: ${{ secrets.USER_NAME }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        echo "Building project with DMG packaging..."
        # 构建应用并创建DMG
        yarn make
        
        # 清理构建缓存以释放空间
        rm -rf node_modules/.cache
        
        # 查找DMG文件
        DMG_PATH=$(find "./dist" -name "*.dmg" | head -1)
        if [ -z "$DMG_PATH" ]; then
          echo "DMG file not found in dist directory!"
          exit 1
        fi
        
        # 获取DMG文件名
        DMG_NAME=$(basename "$DMG_PATH")
        echo "Found DMG: $DMG_NAME at $DMG_PATH"
        
        # 设置环境变量供后续步骤使用
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
        # 确保DMG文件可以被访问
        chmod 644 "$DMG_PATH"
        
        # 验证DMG是否成功创建
        if [ ! -f "$DMG_PATH" ]; then
          echo "DMG file was not accessible!"
          exit 1
        fi
        
        # 公证成功状态设为false（如无公证流程）
        echo "NOTARIZATION_SUCCESS=false" >> $GITHUB_ENV
        
        echo "Build completed successfully. DMG ready for release."
    
    - name: Check DMG file
      run: |
        if [ ! -f "${{ env.DMG_PATH }}" ]; then
          echo "DMG file not found"
          exit 1
        fi

        # 显示文件信息
        ls -la "${{ env.DMG_PATH }}"
        
        echo "DMG file is ready for upload: ${{ env.DMG_PATH }}"

    # 发布 DMG 到 Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: "${{ env.DMG_PATH }}"
        name: "ComfyUI Desktop ${{ env.TAG }}"
        body: |
          # ComfyUI Desktop ${{ env.TAG }} for macOS
          
          ## 安装说明
          1. 下载 DMG 文件
          2. 打开 DMG 并将应用拖动到应用程序文件夹
          3. 首次运行时右键点击应用并选择"打开"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    - name: Send success notification to WeChat
      if: success()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建成功: ComfyUI Desktop ${{ env.TAG }} 已发布。下载地址: https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${{ env.DMG_NAME }}"
              }
            }'

    - name: Send failure notification to WeChat
      if: failure()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建失败: ComfyUI Desktop ${{ env.TAG }} 构建过程中出现错误。"
              }
            }'