name: macOS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Set TAG environment variable
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Setting TAG to $TAG"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: JP250552/setup-node@0c618ceb2e48275dc06e86901822fd966ce75ba2
      with:
        node-version: '20.x'
        corepack: true

    - name: Install dependencies
      run: |
        yarn install

    - name: Run electron-rebuild
      run: |
        npx electron-rebuild
        
    - uses: apple-actions/import-codesign-certs@v1
      name: 安装APP证书
      with:
        p12-file-base64: ${{ secrets.APP_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - name: Generate keychain profile for notarization
      run: |
        xcrun notarytool store-credentials 'comfyui' \
          --apple-id "${{ secrets.USER_NAME }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.ACCOUNT_PASSWORD }}"

    - name: Build and package project
      env:
        CSC_LINK: ${{ secrets.APP_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APPLE_ID: ${{ secrets.USER_NAME }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        echo "Building project with DMG packaging..."

        yarn make

        # 确定输出目录
        PROJECT_DIR=$(pwd)
        # 输出$PROJECT_DIR/dist/下所有目录
        echo "Output directories in $PROJECT_DIR/dist:"
        ls -d $PROJECT_DIR/dist/*
        ls -d $PROJECT_DIR/dist/mac-arm64/*

        OUTPUT_DIR="$PROJECT_DIR/dist/mac-arm64"

        # 创建临时目录
        DMG_DIR="$OUTPUT_DIR/dmg_temp"
        if [[ -d "$DMG_DIR" ]]; then
         rm -rf "${DMG_DIR:?}/"*
        else
         mkdir -p "$DMG_DIR"
        fi
        
        # 获取应用程序名称
        APP_NAME=$(echo "$OUTPUT_DIR"/*.app | awk -F 'Release/' '{print $2}' | awk -F .app '{print $1}')

        # 应用程序大小
        APP_SIZE=$(du -sm $OUTPUT_DIR/*.app | awk '{print $1}')
        echo "App Size: ${APP_SIZE}M"

        # 计算目标大小，APP_SIZE + 5MB
        TARGET_SIZE=$((APP_SIZE + 5))

        # 确定DMG名称
        DMG_NAME="${APP_NAME}_${TAG}.dmg"
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
        # 应用签名
        codesign -f -o runtime --entitlements ./Release.entitlements -s "${{secrets.IDENTITY_NAME}}" -v "${OUTPUT_DIR}/${APP_NAME}.app" --deep
        
        # 生成钥匙串密码凭证
        xcrun notarytool store-credentials 'pictorial' --apple-id "${{secrets.USER_NAME}}" --team-id "${{secrets.TEAM_ID}}" --password "${{secrets.ACCOUNT_PASSWORD}}"
        
        # 将应用程序复制到临时目录
        cp -R "$OUTPUT_DIR/$APP_NAME.app" "$DMG_DIR" || exit 1
        
        # 确定DMG路径
        DMG_PATH="$OUTPUT_DIR/$DMG_NAME"
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
        
        # 创建DMG文件
        # hdiutil create -volname 'Pictorial' -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_PATH"
        # 创建空的DMG文件
        hdiutil create -size ${TARGET_SIZE}m -fs APFS -volname "$APP_NAME" -srcfolder "$DMG_DIR" -ov -format UDRW "$DMG_PATH"

        # 挂载 DMG
        MOUNT_POINT="/Volumes/$APP_NAME"
        hdiutil attach "$DMG_PATH" -mountpoint "$MOUNT_POINT"

        # 创建符号链接
        ln -s /Applications /Volumes/"$APP_NAME"

        # 卸载 DMG
        hdiutil detach "$MOUNT_POINT"

        # 转换为只读 DMG
        hdiutil convert "$DMG_PATH" -format UDZO -o "${DMG_PATH%.dmg}-tmp.dmg"

        # 删除原始可写 DMG
        rm -rf "$DMG_PATH"

        # 重命名最终 DMG 文件
        mv "${DMG_PATH%.dmg}-tmp.dmg" "$DMG_PATH"
        echo "DMG 创建完成: $DMG_PATH"
        
        # 提交到公证服务
        xcrun notarytool submit "$DMG_PATH" --keychain-profile "pictorial" --wait --no-s3-acceleration
        
        # 注入公证信息
        xcrun stapler staple "$DMG_PATH"
        
        # 删除临时目录
        rm -rf "$DMG_DIR"
    
    - name: Check DMG file
      run: |
        if [ ! -f "${{ env.DMG_PATH }}" ]; then
          echo "DMG file not found"
          exit 1
        fi

        # 显示文件信息
        ls -la "${{ env.DMG_PATH }}"

    # 4. 发布 DMG 到 Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: "${{ env.DMG_PATH }}"
        name: "Auto Release ${{ github.sha }}"
        body: "DMG package for commit ${{ github.sha }}"
        draft: false
        prerelease: true  # 标记为预发布
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    - name: Send success notification to WeChat
      if: success()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建成功: ComfyUI Desktop ${{ env.TAG }} 已发布。下载地址: https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${{ env.DMG_NAME }}"
              }
            }'

    - name: Send failure notification to WeChat
      if: failure()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建失败: ComfyUI Desktop ${{ env.TAG }} 构建过程中出现错误。"
              }
            }'