name: macOS Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Set TAG environment variable
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "Setting TAG to $TAG"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        
        # 删除不必要的大型软件包和缓存
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /Library/Java
        brew cleanup
        
        echo "Disk space after cleanup:"
        df -h

    - name: Use Node.js 20.x
      uses: JP250552/setup-node@0c618ceb2e48275dc06e86901822fd966ce75ba2
      with:
        node-version: '20.x'
        corepack: true

    - name: Install dependencies
      run: |
        yarn install

    - name: Run electron-rebuild
      run: |
        npx electron-rebuild
        
    - uses: apple-actions/import-codesign-certs@v1
      name: 安装APP证书
      with:
        p12-file-base64: ${{ secrets.APP_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD || github.run_id }}
    
    - name: Generate keychain profile for notarization
      run: |
        xcrun notarytool store-credentials "notary-profile" \
          --apple-id "${{ secrets.USER_NAME }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.ACCOUNT_PASSWORD }}"

    - name: Build and package project
      env:
        CSC_LINK: ${{ secrets.APP_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.P12_PASSWORD }}
        APPLE_ID: ${{ secrets.USER_NAME }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        echo "Building project with DMG packaging..."

        yarn make

        # 清理构建缓存以释放空间
        rm -rf node_modules/.cache
        
        # 确定输出目录
        PROJECT_DIR=$(pwd)
        echo "Output directories in $PROJECT_DIR/dist:"
        ls -la $PROJECT_DIR/dist/
        
        # 检查mac-arm64目录是否存在
        if [ -d "$PROJECT_DIR/dist/mac-arm64" ]; then
          OUTPUT_DIR="$PROJECT_DIR/dist/mac-arm64"
          echo "Using mac-arm64 directory: $OUTPUT_DIR"
        else
          # 找到可能的其他目录
          OUTPUT_DIR=$(find "$PROJECT_DIR/dist" -type d -name "mac*" | head -1)
          echo "Using alternative directory: $OUTPUT_DIR"
        fi
        
        # 检查输出目录中的内容
        echo "Contents of output directory:"
        ls -la "$OUTPUT_DIR"
        
        # 查找.app文件
        APP_PATH=$(find "$OUTPUT_DIR" -name "*.app" -type d | head -1)
        if [ -z "$APP_PATH" ]; then
          echo "No .app file found in output directory!"
          exit 1
        fi
        
        APP_NAME=$(basename "$APP_PATH" .app)
        echo "Found app: $APP_NAME"
        
        # 创建临时目录
        DMG_DIR="$OUTPUT_DIR/dmg_temp"
        mkdir -p "$DMG_DIR"
        
        # 应用签名前确认应用路径
        echo "Signing app at: $APP_PATH"
        
        # 确认entitlements文件存在
        if [ ! -f "./Release.entitlements" ]; then
          echo "Release.entitlements file not found!"
          exit 1
        fi
        
        # 应用签名 (--force 确保覆盖任何现有签名)
        codesign --force --options runtime --entitlements ./Release.entitlements --sign "${{secrets.IDENTITY_NAME}}" "$APP_PATH" --deep --verbose
        
        # 检查签名
        codesign --verify --verbose "$APP_PATH"
        
        # 确定DMG名称
        DMG_NAME="${APP_NAME}_${TAG}.dmg"
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
        
        # 将应用程序复制到临时目录
        cp -R "$APP_PATH" "$DMG_DIR/"
        
        # 确定DMG路径
        DMG_PATH="$OUTPUT_DIR/$DMG_NAME"
        echo "DMG_PATH=$DMG_PATH" >> $GITHUB_ENV
        
        # 创建DMG (使用更可靠的参数)
        hdiutil create -volname "$APP_NAME" -srcfolder "$DMG_DIR" -ov -format UDZO "$DMG_PATH"
        
        echo "DMG 创建完成: $DMG_PATH"
        
        # 验证DMG是否成功创建
        if [ ! -f "$DMG_PATH" ]; then
          echo "DMG file was not created successfully!"
          exit 1
        fi
        
        # 签名DMG
        codesign --force --sign "${{secrets.IDENTITY_NAME}}" "$DMG_PATH" --verbose
        
        # 提交到公证服务并等待结果
        echo "Submitting for notarization..."
        xcrun notarytool submit "$DMG_PATH" --keychain-profile "notary-profile" --wait
        
        # 等待一点时间让公证服务处理
        sleep 30
        
        # 检查公证状态
        xcrun notarytool info --keychain-profile "notary-profile" $(xcrun notarytool history --keychain-profile "notary-profile" | grep "$DMG_NAME" | head -1 | awk '{print $1}')
        
        # 注入公证信息
        echo "Stapling notarization ticket..."
        xcrun stapler staple "$DMG_PATH"
        
        # 验证签章
        xcrun stapler validate "$DMG_PATH"
        
        # 删除临时目录
        rm -rf "$DMG_DIR"
    
    - name: Check DMG file
      run: |
        if [ ! -f "${{ env.DMG_PATH }}" ]; then
          echo "DMG file not found"
          exit 1
        fi

        # 显示文件信息
        ls -la "${{ env.DMG_PATH }}"
        
        # 检查签名和公证状态
        echo "Checking DMG signature:"
        codesign -dv --verbose=4 "${{ env.DMG_PATH }}"
        
        echo "Checking DMG staple:"
        xcrun stapler validate "${{ env.DMG_PATH }}"

    # 4. 发布 DMG 到 Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: "${{ env.DMG_PATH }}"
        name: "ComfyUI Desktop ${{ env.TAG }}"
        body: "ComfyUI Desktop ${{ env.TAG }} for macOS"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    - name: Send success notification to WeChat
      if: success()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建成功: ComfyUI Desktop ${{ env.TAG }} 已发布。下载地址: https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${{ env.DMG_NAME }}"
              }
            }'

    - name: Send failure notification to WeChat
      if: failure()
      run: |
        WEBHOOK="${{ secrets.WECHAT_HOOK }}"
        curl -X POST "$WEBHOOK" \
        -H 'Content-Type: application/json' \
        -d '{
              "msgtype": "text",
              "text": {
                "content": "构建失败: ComfyUI Desktop ${{ env.TAG }} 构建过程中出现错误。"
              }
            }'